name: Documentation Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'stack/**'
      - 'appset/**'
      - 'sample-element/**'
      - 'values/**'
      - '*.yaml'
      - 'tools/doc-generator.py'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-docs:
    name: Verify Documentation
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[docs-updated]')"
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install pyyaml
      
      - name: Check documentation status
        id: check
        run: |
          set -e  # Exit on any error
          
          # Run the generator and capture exit code
          if ! python tools/doc-generator.py; then
            echo "❌ Documentation generator failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Stage all files (including new ones) to detect them with git diff
          git add -A
          
          # Check if any files changed (including new files, excluding timestamp-only changes)
          # Get list of modified and new files
          CHANGED_FILES=$(git diff --cached --name-only)
          
          if [ -z "$CHANGED_FILES" ]; then
            # No files changed at all
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "✅ Documentation is up to date" >> $GITHUB_STEP_SUMMARY
          else
            # Files changed - check if it's only timestamps
            REAL_CHANGES=false
            NEW_FILES=false
            
            for file in $CHANGED_FILES; do
              # Check if this is a new file
              if ! git ls-tree HEAD --name-only | grep -q "^$file$"; then
                echo "  Found new documentation file: $file" >> $GITHUB_STEP_SUMMARY
                NEW_FILES=true
                REAL_CHANGES=true
              else
                # Check if the file has non-timestamp changes
                # This filters out lines containing "Generated:" and compares
                DIFF_WITHOUT_TIMESTAMP=$(git diff --cached "$file" | grep -v "^\+.*Generated:" | grep -v "^\-.*Generated:" | grep "^[+-]" | grep -v "^+++\|^---" || true)
                
                if [ -n "$DIFF_WITHOUT_TIMESTAMP" ]; then
                  REAL_CHANGES=true
                fi
              fi
            done
            
            if [ "$REAL_CHANGES" = true ]; then
              echo "outdated=true" >> $GITHUB_OUTPUT
              if [ "$NEW_FILES" = true ]; then
                echo "## ⚠️ Missing Documentation Files Detected!" >> $GITHUB_STEP_SUMMARY
                echo "New elements were added without documentation. The following files need to be created:" >> $GITHUB_STEP_SUMMARY
              else
                echo "## Files that need updating (ignoring timestamp changes):" >> $GITHUB_STEP_SUMMARY
              fi
              git diff --cached --name-only >> $GITHUB_STEP_SUMMARY
            else
              echo "outdated=false" >> $GITHUB_OUTPUT
              echo "✅ Documentation is up to date (only timestamp changes detected)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Post status comment
        if: steps.check.outputs.outdated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const labels = await github.rest.issues.listLabelsOnIssue({
              ...context.repo,
              issue_number: context.issue.number,
            });
            
            const hasLabel = labels.data.some(l => l.name === 'update-docs');
            
            const body = `## 📚 Documentation Status: Outdated
            
            The documentation needs to be updated to reflect recent changes.
            
            ### Options:
            1. **Automatic**: Add the \`update-docs\` label to this PR
            2. **Manual**: Run \`python tools/doc-generator.py\` locally and commit
            
            ${hasLabel ? '⏳ The `update-docs` label is present - update should trigger soon...' : ''}`;
            
            // Find existing bot comment
            const comments = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(c => 
              c.user.type === 'Bot' && c.body.includes('📚 Documentation Status:')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
            
            // Fail the check
            core.setFailed('Documentation is outdated. Add `update-docs` label or update manually.');
      
      - name: Clear success comment
        if: steps.check.outputs.outdated == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Remove any outdated comments
            const comments = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });
            
            for (const comment of comments.data) {
              if (comment.user.type === 'Bot' && comment.body.includes('📚 Documentation Status:')) {
                await github.rest.issues.deleteComment({
                  ...context.repo,
                  comment_id: comment.id,
                });
              }
            }
